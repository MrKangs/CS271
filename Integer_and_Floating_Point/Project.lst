Microsoft (R) Macro Assembler Version 14.24.28316.0	    02/26/20 22:20:19
Integer_and_Floating_Point.asm				     Page 1 - 1


				;This program is take the user name and print it out
				;Then the user get an option to choose either int(0) or float(1) to calculate the sum of the 5 numbers and the average of them
				;which the user will enter after choosing the option.
				;After that, the user will enter 5 numbers and will be store into the stack
				;The result will be also in the stack to print out later
				;At last, the user will get an option to either redo the whole process or quit the program
				;This program is designed by Kenneth Kang, Feb 26th with other friends and TA help

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat,stdcall
Integer_and_Floating_Point.asm(12) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword

 00000000			.data
				    ;The title of the program
 00000000 09 09 48 6F 6D	    into1   BYTE    "		Homework 3:Integer_and_Floating_Point			by Kenneth Kang",0
	   65 77 6F 72 6B
	   20 33 3A 49 6E
	   74 65 67 65 72
	   5F 61 6E 64 5F
	   46 6C 6F 61 74
	   69 6E 67 5F 50
	   6F 69 6E 74 09
	   09 09 62 79 20
	   4B 65 6E 6E 65
	   74 68 20 4B 61
	   6E 67 00

				    ;Extra credit. Description in the data
 0000003A 45 78 74 72 61	    extra1  BYTE    "Extra Credit: Pushes strings into stack in the introduction and then prints them out and prints out the Float Stack", 0
	   20 43 72 65 64
	   69 74 3A 20 50
	   75 73 68 65 73
	   20 73 74 72 69
	   6E 67 73 20 69
	   6E 74 6F 20 73
	   74 61 63 6B 20
	   69 6E 20 74 68
	   65 20 69 6E 74
	   72 6F 64 75 63
	   74 69 6F 6E 20
	   61 6E 64 20 74
	   68 65 6E 20 70
	   72 69 6E 74 73
	   20 74 68 65 6D
	   20 6F 75 74 20
	   61 6E 64 20 70
	   72 69 6E 74 73
	   20 6F 75 74 20
	   74 68 65 20 46
	   6C 6F 61 74 20
	   53 74 61 63 6B
	   00
 000000AE 45 78 74 72 61	    extra2  BYTE    "Extra Credit: Color Change. ",0
	   20 43 72 65 64
	   69 74 3A 20 43
	   6F 6C 6F 72 20
	   43 68 61 6E 67
	   65 2E 20 00
				    
				    ;I hope you count this as extra credit even though I saved the value in a veruable 
 000000CB 0000000D		    colorInt1   DWORD   13
 000000CF 0000000F		    colorInt2   DWORD   15
				    
				    ;User name input with asking the question of the user name
 000000D3 50 6C 65 61 73	    userNameInput BYTE    "Please Enter your Name: ", 0
	   65 20 45 6E 74
	   65 72 20 79 6F
	   75 72 20 4E 61
	   6D 65 3A 20 00
 000000EC 48 65 6C 6C 6F	    output  BYTE "Hello, ", 0
	   2C 20 00
 000000F4  00000015 [		    userName   BYTE    21 DUP(0)
	    00
	   ]

				    ;Asking the user whether to do int calculation or floating point calculation
 00000109 2E 20 44 6F 20	    question BYTE    ". Do you want to perform integer or floating-point arithmetic? ",0
	   79 6F 75 20 77
	   61 6E 74 20 74
	   6F 20 70 65 72
	   66 6F 72 6D 20
	   69 6E 74 65 67
	   65 72 20 6F 72
	   20 66 6C 6F 61
	   74 69 6E 67 2D
	   70 6F 69 6E 74
	   20 61 72 69 74
	   68 6D 65 74 69
	   63 3F 20 00
 00000149 50 6C 65 61 73	    option1 BYTE    "Please type 0 for integer or 1 for floating point arithmetic: ",0
	   65 20 74 79 70
	   65 20 30 20 66
	   6F 72 20 69 6E
	   74 65 67 65 72
	   20 6F 72 20 31
	   20 66 6F 72 20
	   66 6C 6F 61 74
	   69 6E 67 20 70
	   6F 69 6E 74 20
	   61 72 69 74 68
	   6D 65 74 69 63
	   3A 20 00

				    ;Once the user choose an option, it will give the following statements
 00000188 59 6F 75 20 63	    floatSelection BYTE    "You choose to perform floating point arithmetic.", 0
	   68 6F 6F 73 65
	   20 74 6F 20 70
	   65 72 66 6F 72
	   6D 20 66 6C 6F
	   61 74 69 6E 67
	   20 70 6F 69 6E
	   74 20 61 72 69
	   74 68 6D 65 74
	   69 63 2E 00
 000001B9 59 6F 75 20 63	    intSelection BYTE    "You choose to perform integer arithmetic.", 0
	   68 6F 6F 73 65
	   20 74 6F 20 70
	   65 72 66 6F 72
	   6D 20 69 6E 74
	   65 67 65 72 20
	   61 72 69 74 68
	   6D 65 74 69 63
	   2E 00

				    ;Asking the user to enter 5 numbers
 000001E3 50 6C 65 61 73	    inputNum BYTE    "Please enter 5 numbers",0
	   65 20 65 6E 74
	   65 72 20 35 20
	   6E 75 6D 62 65
	   72 73 00

				    ;The sum, average, and remainder result statement without the value
 000001FA 54 68 65 20 73	    sumResult BYTE    "The sum of the numbers you enter is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 20 79 6F
	   75 20 65 6E 74
	   65 72 20 69 73
	   3A 20 00
 00000220 54 68 65 20 61	    averageResult BYTE    "The average of the numbers is:",0
	   76 65 72 61 67
	   65 20 6F 66 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 20 69 73 3A
	   00
 0000023F 20 52 65 6D 61	    remainderResult BYTE    " Remainder:", 0
	   69 6E 64 65 72
	   3A 00

				    ;Asking the user to redo the program again or not
 0000024B 44 6F 20 79 6F	    option2 BYTE    "Do you want to perform another calculation? Please enter 0 for no or 1 for yes", 0
	   75 20 77 61 6E
	   74 20 74 6F 20
	   70 65 72 66 6F
	   72 6D 20 61 6E
	   6F 74 68 65 72
	   20 63 61 6C 63
	   75 6C 61 74 69
	   6F 6E 3F 20 50
	   6C 65 61 73 65
	   20 65 6E 74 65
	   72 20 30 20 66
	   6F 72 20 6E 6F
	   20 6F 72 20 31
	   20 66 6F 72 20
	   79 65 73 00
				    
				    ;If the user choose not to do, then the user will get an message
 0000029A 42 79 65 21 20	    bye BYTE    "Bye! Have a nice day!",0
	   48 61 76 65 20
	   61 20 6E 69 63
	   65 20 64 61 79
	   21 00

 00000000			.code
 00000000			main proc
				    ;Push the color int value into the changeColor function to execute
 00000000  FF 35 000000CB R	    push colorInt1
 00000006  FF 35 000000CF R	    push colorInt2
				    ;Push the statement into the changeColor function to print out that this is extra credit
 0000000C  68 000000AE R	    push OFFSET extra2
 00000011  E8 0000002D		    call changeColor

				    ;Push the statements of introduction, extra credit, and userName into the Introduction function
 00000016  68 00000000 R	    push OFFSET into1
 0000001B  68 0000003A R	    push OFFSET extra1
 00000020  68 000000D3 R	    push OFFSET userNameInput
 00000025  68 000000F4 R	    push OFFSET userName
 0000002A  6A 15		    push SIZEOF userName
 0000002C  68 000000EC R	    push OFFSET output
 00000031  E8 0000002F		    call Introduction
 00000036  5D			    pop EBP
 00000037  C2 003C		    ret 60

				    ;calls the User_Instruction: this contains the user input for number, calculation, and printing out the results 
 0000003A  E8 0000006B		    call User_Instruction
 0000003F  5D			    pop EBP
 00000040  C2 0010		    ret 16

 00000043			main endp

 00000043			changeColor PROC

					; Set text color to teal
 00000043  55					push EBP
 00000044  8B EC				mov	 EBP, ESP
 00000046  8B 55 08		        mov EDX, [EBP + 8]   ;extra2 statement
 00000049  E8 00000000 E	        call WriteString
 0000004E  B9 00000002		        mov ECX, 2
 00000053  8B 45 0C				mov  EAX, [EBP + 12] ;colorInt1
 00000056  6B C0 10				imul EAX, 16
 00000059  03 45 10				add  EAX, [EBP + 16] ;colorInt2
 0000005C  E8 00000000 E			call setTextColor
 00000061  5D					pop	 EBP
 00000062  C2 000C				ret  12	; Clean up the stack
 00000065			changeColor	ENDP

 00000065			Introduction proc ;Prints out the intro
 00000065  55			    push EBP
 00000066  8B EC		    mov EBP, ESP
 00000068  E8 00000000 E	    call Crlf
 0000006D  8B 55 1C		    mov EDX, [EBP + 28] ;into1
 00000070  E8 00000000 E	    call WriteString
 00000075  E8 00000000 E	    call Crlf
 0000007A  8B 55 18		    mov EDX, [EBP + 24] ;extra1
 0000007D  E8 00000000 E	    call WriteString
 00000082  E8 00000000 E	    call Crlf
 00000087  8B 55 14		    mov EDX, [EBP + 20] ;userNameInput
 0000008A  E8 00000000 E	    call WriteString
 0000008F  8B 55 10		    mov EDX, [EBP + 16] ;username OFFSET
 00000092  8B 4D 0C		    mov ECX, [EBP + 12] ;username SIZEOF
 00000095  E8 00000000 E	    call ReadString
 0000009A  8B 55 08		    mov EDX, [EBP + 8]  ;output
 0000009D  E8 00000000 E	    call WriteString
 000000A2  8B 55 10		    mov EDX, [EBP + 16]
 000000A5  E8 00000000 E	    call WriteString

 000000AA			Introduction ENDP

 000000AA			User_Instruction proc ;Asks user for integer or float
 000000AA  68 00000109 R	    push OFFSET question
 000000AF  68 00000149 R	    push OFFSET option1
 000000B4  68 00000188 R	    push OFFSET floatSelection
 000000B9  68 000001B9 R	    push OFFSET intSelection
 000000BE  68 000001E3 R	    push OFFSET inputNum

 000000C3  55			    push EBP
 000000C4  8B EC		    mov EBP, ESP
 000000C6  8B 55 14		    mov EDX, [EBP + 20] ;Question
 000000C9  E8 00000000 E	    call WriteString
 000000CE  E8 00000000 E	    call Crlf
 000000D3  8B 55 10		    mov EDX, [EBP + 16] ;Option1
 000000D6  E8 00000000 E	    call WriteString
 000000DB  E8 00000000 E	    call ReadDec
 000000E0  83 F8 01		    cmp EAX, 1
 000000E3  74 20		    je float
 000000E5  8B 55 08		    mov EDX, [EBP + 8] ;int stack, jmps to int stack calculations ;intselection
 000000E8  E8 00000000 E	    call WriteString
 000000ED  E8 00000000 E	    call Crlf
 000000F2  8B 55 04		    mov EDX, [EBP + 4]  ;inputNum
 000000F5  E8 00000000 E	    call WriteString
 000000FA  E8 00000000 E	    call Crlf
 000000FF  EB 20		    jmp IntData ;Jumps to IntData which contains the user input for the 5 numbers, total sum, and average
 00000101  5D			    pop EBP
 00000102  C2 003C		    ret 60

 00000105			    float: ;float stack, jmps to float stack calculations
 00000105  8B 55 0C		        mov EDX, [EBP + 12] ;floatselection
 00000108  E8 00000000 E	        call WriteString
 0000010D  E8 00000000 E	        call Crlf
 00000112  8B 55 04		        mov EDX, [EBP + 4]  ;inputNum
 00000115  E8 00000000 E	        call WriteString
 0000011A  E8 00000000 E	        call Crlf
 0000011F  EB 63		        jmp FloatData   ;Jumps to FloatData which contains the user input for the 5 numbers, total sum, and average

 00000121			    outofit:

 00000121			User_Instruction endp

 00000121			IntData proc ;Integer stack
 00000121  B9 00000005		    mov ECX, 5
 00000126  55			    push EBP
 00000127  8B EC		    mov EBP, ESP
 00000129			    Get_Data: ;Gets the numbers and puts it onto the stack
 00000129  E8 00000000 E	        call ReadInt
 0000012E  50			        push EAX
 0000012F  E2 F8		        loop Get_Data

 00000131			    Calculate_Sum: ;Finds the sum and the average of the stack

 00000131  8B 44 24 10		        mov EAX, [ESP + 16] ;first int
 00000135  03 44 24 0C		        add EAX, [ESP + 12] ; + second int
 00000139  03 44 24 08		        add EAX, [ESP + 8]  ; + thrid int
 0000013D  03 44 24 04		        add EAX, [ESP + 4]  ; + fourth int
 00000141  03 04 24		        add EAX, [ESP]  ; + fifth int = total sum
 00000144  BA 000001FA R	        mov EDX, OFFSET sumResult   ;Print the sumResult Statement
 00000149  E8 00000000 E	        call WriteString
 0000014E  E8 00000000 E	        call WriteDec   ;Print the sum of ints 
 00000153  E8 00000000 E	        call Crlf
 00000158  BA 00000220 R	        mov EDX, OFFSET averageResult   ;Print the averageResult statement
 0000015D  E8 00000000 E	        call WriteString
 00000162  99			        cdq
 00000163  BB 00000005		        mov EBX, 5  ;Since there is only five numbers, move the value 5 to EBX
 00000168  F7 F3		        div EBX ;Divide the EAX result of EBX
 0000016A  8B CA		        mov ECX, EDX
 0000016C  E8 00000000 E	        call WriteDec  ;Print the average value
 00000171  BA 0000023F R	        mov EDX, OFFSET remainderResult
 00000176  E8 00000000 E	        call WriteString
 0000017B  8B C1		        mov EAX, ECX
 0000017D  E8 00000000 E	        call WriteDec   ;Print the remainder
 00000182  EB 4F		        jmp Good_bye    ;Jumps to Good_bye function

 00000184			IntData endp

 00000184			FloatData proc ;Float stack
 00000184  B9 00000005		    mov ECX, 5
 00000189  55			    push EBP
 0000018A  8B EC		    mov EBP, ESP
 0000018C  9B DB E3		    FINIT
 0000018F			    Get_Data1: ;Reads in the numbers and pushes them onto the stack
 0000018F  E8 00000000 E	        call ReadFloat
 00000194  E2 F9		        loop Get_Data1

 00000196			    Calc_Sum1: ;Finds the sum and the average
 00000196  E8 00000000 E	        call ShowFPUStack
 0000019B  8B 44 24 10		        mov  EAX, [ESP + 16]    ;float1
 0000019F  D8 C1		        fadd st, st(1)  ; + float2
 000001A1  D8 C2		        fadd st, st(2)  ; + float3
 000001A3  D8 C3		        fadd st, st(3)  ; + float4
 000001A5  D8 C4		        fadd st, st(4) ; + float5 = total sum

 000001A7  BA 000001FA R	    mov EDX, OFFSET sumResult   ;Print the sumResult Statement
 000001AC  E8 00000000 E	    call WriteString
 000001B1  E8 00000000 E	    call WriteFloat
 000001B6  E8 00000000 E	    call Crlf
 000001BB  BA 00000220 R	    mov EDX, OFFSET averageResult   ;Print the averageResult Statement
 000001C0  E8 00000000 E	    call WriteString
 000001C5  6A 05		    push 5
 000001C7  DB 04 24		    FILD DWORD ptr[esp]
 000001CA  DE F9		    FDIV ;average
 000001CC  E8 00000000 E	    call WriteFloat
 000001D1  EB 00		    jmp Good_bye
 000001D3			FloatData endp

 000001D3			Good_bye proc ;Asks the user if they want to loop or exits out and says bye
 000001D3  E8 00000000 E	    call Crlf
 000001D8  BA 0000024B R	    mov EDX, OFFSET option2
 000001DD  E8 00000000 E	    call WriteString
 000001E2  E8 00000000 E	    call Crlf
 000001E7  E8 00000000 E	    call ReadInt
 000001EC  83 F8 01		    cmp EAX, 1
 000001EF  0F 84 FFFFFEB5	    je User_Instruction
				    ;displays a bye message
 000001F5  BA 0000029A R	    mov EDX, OFFSET bye
 000001FA  E8 00000000 E	    call WriteString
 000001FF  E8 00000000 E	    call Crlf
 00000204			Good_bye endp
				invoke ExitProcess,0
 00000204  6A 00	   *	    push   +000000000h
 00000206  E8 00000000 E   *	    call   ExitProcess

				end main
Microsoft (R) Macro Assembler Version 14.24.28316.0	    02/26/20 22:20:19
Integer_and_Floating_Point.asm				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002B0 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000020B Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatData  . . . . . . . . . . .	P Near	 00000184 _TEXT	Length= 0000004F Public STDCALL
  Get_Data1  . . . . . . . . . .	L Near	 0000018F _TEXT	
  Calc_Sum1  . . . . . . . . . .	L Near	 00000196 _TEXT	
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Good_bye . . . . . . . . . . . .	P Near	 000001D3 _TEXT	Length= 00000031 Public STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IntData  . . . . . . . . . . . .	P Near	 00000121 _TEXT	Length= 00000063 Public STDCALL
  Get_Data . . . . . . . . . . .	L Near	 00000129 _TEXT	
  Calculate_Sum  . . . . . . . .	L Near	 00000131 _TEXT	
Introduction . . . . . . . . . .	P Near	 00000065 _TEXT	Length= 00000045 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
User_Instruction . . . . . . . .	P Near	 000000AA _TEXT	Length= 00000077 Public STDCALL
  float  . . . . . . . . . . . .	L Near	 00000105 _TEXT	
  outofit  . . . . . . . . . . .	L Near	 00000121 _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
changeColor  . . . . . . . . . .	P Near	 00000043 _TEXT	Length= 00000022 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000043 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
averageResult  . . . . . . . . .	Byte	 00000220 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bye  . . . . . . . . . . . . . .	Byte	 0000029A _DATA	
colorInt1  . . . . . . . . . . .	DWord	 000000CB _DATA	
colorInt2  . . . . . . . . . . .	DWord	 000000CF _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
extra1 . . . . . . . . . . . . .	Byte	 0000003A _DATA	
extra2 . . . . . . . . . . . . .	Byte	 000000AE _DATA	
floatSelection . . . . . . . . .	Byte	 00000188 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputNum . . . . . . . . . . . .	Byte	 000001E3 _DATA	
intSelection . . . . . . . . . .	Byte	 000001B9 _DATA	
into1  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
option1  . . . . . . . . . . . .	Byte	 00000149 _DATA	
option2  . . . . . . . . . . . .	Byte	 0000024B _DATA	
output . . . . . . . . . . . . .	Byte	 000000EC _DATA	
question . . . . . . . . . . . .	Byte	 00000109 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
remainderResult  . . . . . . . .	Byte	 0000023F _DATA	
sumResult  . . . . . . . . . . .	Byte	 000001FA _DATA	
userNameInput  . . . . . . . . .	Byte	 000000D3 _DATA	
userName . . . . . . . . . . . .	Byte	 000000F4 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
