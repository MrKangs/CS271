Microsoft (R) Macro Assembler Version 14.24.28316.0	    03/06/20 15:23:52
Organize_a_List.asm					     Page 1 - 1


				;This program will change the color of the text (extra credit)
				;Then it will take a integer betweem 10 to 200 to generate that many numbers in a list
				;Then it will print the unorganize list, the median, and the organize list in rows of 10
				;The order of organizing will be large number to small number
				;This program is made by Kenneth Kang, March 5th 2020 with help from online and notes in class

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				.386
				.model flat,stdcall
Organize_a_List.asm(9) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword
 00000000			.data

 00000000 09 48 6F 6D 65		welcome	BYTE	"	Homework #7: Organize a List		Kenneth Kang.", 0
	   77 6F 72 6B 20
	   23 37 3A 20 4F
	   72 67 61 6E 69
	   7A 65 20 61 20
	   4C 69 73 74 09
	   09 4B 65 6E 6E
	   65 74 68 20 4B
	   61 6E 67 2E 00

 0000002D 50 6C 65 61 73		instructions_1	BYTE	"Please enter a number between [10, 200] to see all ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   6E 75 6D 62 65
	   72 20 62 65 74
	   77 65 65 6E 20
	   5B 31 30 2C 20
	   32 30 30 5D 20
	   74 6F 20 73 65
	   65 20 61 6C 6C
	   20 00
 00000061 6F 66 20 74 68		instructions_2	BYTE	"of the numbers before and after they're sorted. It will display the median value and show the sorted list in descending order", 0
	   65 20 6E 75 6D
	   62 65 72 73 20
	   62 65 66 6F 72
	   65 20 61 6E 64
	   20 61 66 74 65
	   72 20 74 68 65
	   79 27 72 65 20
	   73 6F 72 74 65
	   64 2E 20 49 74
	   20 77 69 6C 6C
	   20 64 69 73 70
	   6C 61 79 20 74
	   68 65 20 6D 65
	   64 69 61 6E 20
	   76 61 6C 75 65
	   20 61 6E 64 20
	   73 68 6F 77 20
	   74 68 65 20 73
	   6F 72 74 65 64
	   20 6C 69 73 74
	   20 69 6E 20 64
	   65 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   00
 000000DF 50 6C 65 61 73		instructions_3	BYTE	"Please enter a number between 10 and 200.", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   6E 75 6D 62 65
	   72 20 62 65 74
	   77 65 65 6E 20
	   31 30 20 61 6E
	   64 20 32 30 30
	   2E 00
 00000109 54 68 65 20 6E		belowError	BYTE	"The number you entered was too small. ", 0
	   75 6D 62 65 72
	   20 79 6F 75 20
	   65 6E 74 65 72
	   65 64 20 77 61
	   73 20 74 6F 6F
	   20 73 6D 61 6C
	   6C 2E 20 00
 00000130 54 68 65 20 6E		aboveError	BYTE	"The number you entered was too big. ", 0
	   75 6D 62 65 72
	   20 79 6F 75 20
	   65 6E 74 65 72
	   65 64 20 77 61
	   73 20 74 6F 6F
	   20 62 69 67 2E
	   20 00
 00000155 54 68 65 20 6D		medianString	BYTE	"The median is: ",0
	   65 64 69 61 6E
	   20 69 73 3A 20
	   00
 00000165 20 20 20 00			spaces	BYTE	"   ", 0
 00000169 47 6F 6F 64 62		goodbye	BYTE	"Goodbye!", 0
	   79 65 21 00
 00000172 54 68 65 20 61		beforeSort	BYTE	"The array before sorting: ", 0
	   72 72 61 79 20
	   62 65 66 6F 72
	   65 20 73 6F 72
	   74 69 6E 67 3A
	   20 00
 0000018D 54 68 65 20 61		afterSort	BYTE	"The array after sorting: ", 0
	   72 72 61 79 20
	   61 66 74 65 72
	   20 73 6F 72 74
	   69 6E 67 3A 20
	   00
 000001A7 00000000			number	DWORD  ?
 000001AB 00000000			request	DWORD  ?
 000001AF 00000000			requestTemp	DWORD  ?

					;constants
 = 0000000A				MIN				=		 10
 = 000000C8				MAX				=		 200
 = 00000064				LO				=		 100
 = 000003E7				HI				=		 999
 = 000000C8				MAX_SIZE		=		 200

					;Array
 000001B3  000000C8 [			list	DWORD MAX_SIZE DUP(?)  
	    00000000
	   ]

					;change text color
 000004D3 45 78 74 72 61	    extra5  BYTE    "Extra Credit: Color Change. ",0
	   20 43 72 65 64
	   69 74 3A 20 43
	   6F 6C 6F 72 20
	   43 68 61 6E 67
	   65 2E 20 00
 000004F0 0000000B			colorInt1	DWORD	11
 000004F4 00000010			colorInt2	DWORD	16


 00000000			.code
 00000000			 main PROC

				    ;Push the color int value into the changeColor function to execute
 00000000  FF 35 000004F0 R	    push colorInt1
 00000006  FF 35 000004F4 R	    push colorInt2
				    ;Push the statement into the changeColor function to print out that this is extra credit
 0000000C  68 000004D3 R	    push OFFSET extra5
 00000011  E8 00000098		    call changeColor


 00000016  E8 000000B5			call introduction

 0000001B  68 000001AB R		push OFFSET request
 00000020  E8 000000D9			call getData

 00000025  E8 00000000 E		call Randomize			; seed for generating random numbers

 0000002A  68 000001B3 R		push OFFSET list
 0000002F  FF 35 000001AB R		push request
 00000035  E8 00000114			call fillArray

 0000003A  BA 00000172 R		mov  EDX, OFFSET beforeSort
 0000003F  E8 00000000 E		call WriteString
 00000044  E8 00000000 E		call Crlf
 00000049  68 000001B3 R		push OFFSET list
 0000004E  FF 35 000001AB R		push request
 00000054  E8 0000011A			call displayList

 00000059  68 000001B3 R		push OFFSET list
 0000005E  FF 35 000001AB R		push request
 00000064  E8 00000142			call sortList

 00000069  E8 00000000 E		call Crlf
 0000006E  68 000001B3 R		push OFFSET list
 00000073  FF 35 000001AB R		push request
 00000079  E8 00000183			call displayMedian


 0000007E  E8 00000000 E		call Crlf
 00000083  BA 0000018D R		mov  EDX, OFFSET afterSort
 00000088  E8 00000000 E		call WriteString
 0000008D  E8 00000000 E		call Crlf
 00000092  68 000001B3 R		push OFFSET list
 00000097  FF 35 000001AB R		push request
 0000009D  E8 000000D1			call displayList

 000000A2  E8 000001BC			call farewell

					exit
 000000A7  6A 00	   *	    push   +000000000h
 000000A9  E8 00000000 E   *	    call   ExitProcess
 000000AE			main ENDP

 000000AE			changeColor PROC

					; Set text color to teal
 000000AE  55					push EBP
 000000AF  8B EC				mov	 EBP, ESP
 000000B1  8B 55 08		        mov EDX, [EBP + 8]   ;extra2 statement
 000000B4  E8 00000000 E	        call WriteString
 000000B9  B9 00000002		        mov ECX, 2
 000000BE  8B 45 0C				mov  EAX, [EBP + 12] ;colorInt1
 000000C1  6B C0 10				imul EAX, 16
 000000C4  03 45 10				add  EAX, [EBP + 16] ;colorInt2
 000000C7  E8 00000000 E			call setTextColor
 000000CC  5D					pop	 EBP
 000000CD  C2 000C				ret  12	; Clean up the stack
 000000D0			changeColor	ENDP

 000000D0			introduction PROC

					; Programmer name and title of assignment
 000000D0  E8 00000000 E		call	 Crlf
 000000D5  BA 00000000 R		mov		 EDX, OFFSET welcome
 000000DA  E8 00000000 E		call	 WriteString
 000000DF  E8 00000000 E		call	 Crlf

					; assignment instructions
 000000E4  BA 0000002D R		mov		EDX, OFFSET instructions_1
 000000E9  E8 00000000 E		call	WriteString
 000000EE  BA 00000061 R		mov		EDX, OFFSET instructions_2
 000000F3  E8 00000000 E		call	WriteString
 000000F8  E8 00000000 E		call	Crlf
 000000FD  C3				ret

 000000FE			introduction ENDP

 000000FE			getData PROC

					; loop to allow user to continue entering numbers until within range of MIN and MAX
 000000FE  55					push EBP
 000000FF  8B EC				mov	 EBP, ESP
 00000101  8B 5D 08				mov	 EBX, [EBP + 8] ; get address of request into EBX 


 00000104				userNumberLoop:
 00000104  BA 000000DF R						mov		EDX, OFFSET instructions_3
 00000109  E8 00000000 E						call	WriteString
 0000010E  E8 00000000 E						call	Crlf
 00000113  E8 00000000 E						call    ReadInt
 00000118  89 03							mov     [EBX], EAX		; save the user's request into var request
 0000011A  83 F8 0A							cmp		EAX, MIN
 0000011D  72 09							jb		errorBelow
 0000011F  3D 000000C8							cmp		EAX, MAX
 00000124  7F 13							jg		errorAbove
 00000126  EB 22							jmp		continue
					;validation

 00000128				errorBelow:
 00000128  BA 00000109 R						mov		EDX, OFFSET belowError
 0000012D  E8 00000000 E						call	WriteString
 00000132  E8 00000000 E						call	Crlf
 00000137  EB CB							jmp		userNumberLoop
 00000139				errorAbove:
 00000139  BA 00000130 R						mov		EDX, OFFSET aboveError
 0000013E  E8 00000000 E						call	WriteString
 00000143  E8 00000000 E						call	Crlf
 00000148  EB BA							jmp		userNumberLoop
 0000014A				continue:
 0000014A  5D						pop EBP
 0000014B  C2 0004			ret 4 ; clean up the stack. we only have 1 extra DWORD to get rid of.
 0000014E			getData ENDP

 0000014E			fillArray PROC
 0000014E  55				push EBP
 0000014F  8B EC			mov  EBP, ESP
 00000151  8B 75 0C			mov  ESI, [EBP + 12]  ; @list
 00000154  8B 4D 08			mov	 ECX, [EBP + 8]   ; loop control based on request

 00000157				fillArrLoop:
 00000157  B8 000003E7				mov		EAX, HI
 0000015C  83 E8 64				sub		EAX, LO
 0000015F  40					inc		EAX
 00000160  E8 00000000 E			call	RandomRange
 00000165  83 C0 64				add		EAX, LO
 00000168  89 06				mov		[ESI], EAX  ; put random number in array
 0000016A  83 C6 04				add		ESI, 4		; next element
 0000016D  E2 E8				loop	fillArrLoop

 0000016F  5D				pop  EBP
 00000170  C2 0008			ret  8
 00000173			fillArray ENDP

 00000173			displayList PROC
 00000173  55				push EBP
 00000174  8B EC			mov  EBP, ESP
 00000176  BB 00000000			mov	 EBX, 0			  ; counting to 10 for ouput
 0000017B  8B 75 0C			mov  ESI, [EBP + 12]  ; @list
 0000017E  8B 4D 08			mov	 ECX, [EBP + 8]   ; loop control based on request
 00000181				displayLoop:
 00000181  8B 06				mov		EAX, [ESI]  ; get current element
 00000183  E8 00000000 E			call	WriteDec
 00000188  BA 00000165 R			mov		EDX, OFFSET spaces
 0000018D  E8 00000000 E			call	WriteString
 00000192  43					inc		EBX
 00000193  83 FB 0A				cmp		EBX, MIN
 00000196  7C 0A				jl		skipCarry
 00000198  E8 00000000 E			call	Crlf
 0000019D  BB 00000000				mov		EBX,0
 000001A2					skipCarry:
 000001A2  83 C6 04				add		ESI, 4		; next element
 000001A5  E2 DA				loop	displayLoop
 000001A7				endDisplayLoop:
 000001A7  5D					pop		EBP
 000001A8  C2 0008				ret		8
 000001AB			displayList ENDP

 000001AB			sortList PROC
 000001AB  55				push EBP
 000001AC  8B EC			mov  EBP, ESP
 000001AE  8B 75 0C			mov  ESI, [EBP + 12]			; @list
 000001B1  8B 4D 08			mov	 ECX, [EBP + 8]				; loop control based on request
 000001B4  49				dec	 ECX
 000001B5				outerLoop:
 000001B5  8B 06				mov		EAX, [ESI]			; get current element
 000001B7  8B D6				mov		EDX, ESI
 000001B9  51					push	ECX					; save outer loop counter
 000001BA					innerLoop:
 000001BA  8B 5E 04					mov		EBX, [ESI+4]
 000001BD  8B 02					mov		EAX, [EDX]
 000001BF  3B C3					cmp		EAX, EBX
 000001C1  7D 0E					jge		skipSwitch
 000001C3  83 C6 04					add		ESI, 4
 000001C6  56						push	ESI
 000001C7  52						push	EDX
 000001C8  51						push	ECX
 000001C9  E8 00000014					call	exchange
 000001CE  83 EE 04					sub		ESI, 4
 000001D1						skipSwitch:
 000001D1  83 C6 04					add		ESI,4

 000001D4  E2 E4					loop	innerLoop
 000001D6						skippit:
 000001D6  59					pop		ECX 			; restore outer loop counter
 000001D7  8B F2				mov		ESI, EDX		; reset ESI

 000001D9  83 C6 04				add		ESI, 4				; next element
 000001DC  E2 D7				loop	outerLoop
 000001DE				endDisplayLoop:
 000001DE  5D					pop		EBP
 000001DF  C2 0008				ret		8
 000001E2			sortList ENDP

 000001E2			exchange PROC
 000001E2  55				push	EBP
 000001E3  8B EC			mov		EBP, ESP
 000001E5  60				pushad

 000001E6  8B 45 10			mov		EAX, [EBP + 16]				; address of second number
 000001E9  8B 5D 0C			mov		EBX, [EBP + 12]				; address of first number
 000001EC  8B D0			mov		EDX, EAX
 000001EE  2B D3			sub		EDX, EBX					; EDX should now have the difference between the first and second number

					; somehow we got to switch these two up.
 000001F0  8B F3			mov		ESI, EBX
 000001F2  8B 0B			mov		ECX, [EBX]
 000001F4  8B 00			mov		EAX, [EAX]
 000001F6  89 06			mov		[ESI], EAX  ; put EAX in array
 000001F8  03 F2			add		ESI, EDX
 000001FA  89 0E			mov		[ESI], ECX

 000001FC  61				popad
 000001FD  5D				pop		EBP
 000001FE  C2 000C			ret		12
 00000201			exchange ENDP

 00000201			displayMedian PROC
 00000201  55				push EBP
 00000202  8B EC			mov  EBP, ESP
 00000204  8B 75 0C			mov  ESI, [EBP + 12]  ; @list
 00000207  8B 45 08			mov	 EAX, [EBP + 8]   ; loop control based on request
 0000020A  BA 00000000			mov  EDX, 0
 0000020F  BB 00000002			mov	 EBX, 2
 00000214  F7 F3			div	 EBX
 00000216  8B C8			mov	 ECX, EAX


 00000218				medianLoop:
 00000218  83 C6 04				add		ESI, 4
 0000021B  E2 FB				loop	medianLoop

					; check for zero
 0000021D  83 FA 00			cmp		EDX, 0
 00000220  75 27			jnz     itsOdd
					; its even
 00000222  8B 46 FC			mov		EAX, [ESI-4]
 00000225  03 06			add		EAX, [ESI]
 00000227  BA 00000000			mov		EDX, 0
 0000022C  BB 00000002			mov		EBX, 2
 00000231  F7 F3			div		EBX
 00000233  BA 00000155 R		mov		EDX, OFFSET medianString
 00000238  E8 00000000 E		call	WriteString
 0000023D  E8 00000000 E		call	WriteDec
 00000242  E8 00000000 E		call	Crlf
 00000247  EB 16			jmp		endDisplayMedian

 00000249				itsOdd:
 00000249  8B 06			mov		EAX, [ESI]
 0000024B  BA 00000155 R		mov		EDX, OFFSET medianString
 00000250  E8 00000000 E		call	WriteString
 00000255  E8 00000000 E		call	WriteDec
 0000025A  E8 00000000 E		call	Crlf

 0000025F				endDisplayMedian:

 0000025F  5D				pop  EBP
 00000260  C2 0008			ret  8
 00000263			displayMedian ENDP

 00000263			farewell PROC
					; say goodbye

 00000263  E8 00000000 E		call	Crlf
 00000268  BA 00000169 R		mov		EDX, OFFSET goodbye
 0000026D  E8 00000000 E		call	WriteString
 00000272  E8 00000000 E		call	Crlf
 00000277  E8 00000000 E		call	Crlf
					exit
 0000027C  6A 00	   *	    push   +000000000h
 0000027E  E8 00000000 E   *	    call   ExitProcess
 00000283			farewell ENDP
				END main
Microsoft (R) Macro Assembler Version 14.24.28316.0	    03/06/20 15:23:52
Organize_a_List.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004F8 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000283 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
changeColor  . . . . . . . . . .	P Near	 000000AE _TEXT	Length= 00000022 Public STDCALL
displayList  . . . . . . . . . .	P Near	 00000173 _TEXT	Length= 00000038 Public STDCALL
  displayLoop  . . . . . . . . .	L Near	 00000181 _TEXT	
  skipCarry  . . . . . . . . . .	L Near	 000001A2 _TEXT	
  endDisplayLoop . . . . . . . .	L Near	 000001A7 _TEXT	
displayMedian  . . . . . . . . .	P Near	 00000201 _TEXT	Length= 00000062 Public STDCALL
  medianLoop . . . . . . . . . .	L Near	 00000218 _TEXT	
  itsOdd . . . . . . . . . . . .	L Near	 00000249 _TEXT	
  endDisplayMedian . . . . . . .	L Near	 0000025F _TEXT	
exchange . . . . . . . . . . . .	P Near	 000001E2 _TEXT	Length= 0000001F Public STDCALL
farewell . . . . . . . . . . . .	P Near	 00000263 _TEXT	Length= 00000020 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 0000014E _TEXT	Length= 00000025 Public STDCALL
  fillArrLoop  . . . . . . . . .	L Near	 00000157 _TEXT	
getData  . . . . . . . . . . . .	P Near	 000000FE _TEXT	Length= 00000050 Public STDCALL
  userNumberLoop . . . . . . . .	L Near	 00000104 _TEXT	
  errorBelow . . . . . . . . . .	L Near	 00000128 _TEXT	
  errorAbove . . . . . . . . . .	L Near	 00000139 _TEXT	
  continue . . . . . . . . . . .	L Near	 0000014A _TEXT	
introduction . . . . . . . . . .	P Near	 000000D0 _TEXT	Length= 0000002E Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000AE Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 000001AB _TEXT	Length= 00000037 Public STDCALL
  outerLoop  . . . . . . . . . .	L Near	 000001B5 _TEXT	
  innerLoop  . . . . . . . . . .	L Near	 000001BA _TEXT	
  skipSwitch . . . . . . . . . .	L Near	 000001D1 _TEXT	
  skippit  . . . . . . . . . . .	L Near	 000001D6 _TEXT	
  endDisplayLoop . . . . . . . .	L Near	 000001DE _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 000003E7h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000064h   
MAX_SIZE . . . . . . . . . . . .	Number	 000000C8h   
MAX  . . . . . . . . . . . . . .	Number	 000000C8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Number	 0000000Ah   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
aboveError . . . . . . . . . . .	Byte	 00000130 _DATA	
afterSort  . . . . . . . . . . .	Byte	 0000018D _DATA	
beforeSort . . . . . . . . . . .	Byte	 00000172 _DATA	
belowError . . . . . . . . . . .	Byte	 00000109 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
colorInt1  . . . . . . . . . . .	DWord	 000004F0 _DATA	
colorInt2  . . . . . . . . . . .	DWord	 000004F4 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
extra5 . . . . . . . . . . . . .	Byte	 000004D3 _DATA	
goodbye  . . . . . . . . . . . .	Byte	 00000169 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instructions_1 . . . . . . . . .	Byte	 0000002D _DATA	
instructions_2 . . . . . . . . .	Byte	 00000061 _DATA	
instructions_3 . . . . . . . . .	Byte	 000000DF _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
list . . . . . . . . . . . . . .	DWord	 000001B3 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
medianString . . . . . . . . . .	Byte	 00000155 _DATA	
number . . . . . . . . . . . . .	DWord	 000001A7 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
requestTemp  . . . . . . . . . .	DWord	 000001AF _DATA	
request  . . . . . . . . . . . .	DWord	 000001AB _DATA	
spaces . . . . . . . . . . . . .	Byte	 00000165 _DATA	
welcome  . . . . . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
